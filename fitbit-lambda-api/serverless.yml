
service: fitbit-lambda-api

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  stage: dev
  environment:
    FITBIT_CLIENT_ID: ${env:FITBIT_CLIENT_ID}
    FITBIT_CLIENT_SECRET: ${env:FITBIT_CLIENT_SECRET}
  
functions:
  getFitbitData:
    handler: handlers/fitbitData.handler  # ← FIXED: Point to handlers/
    events:
      - http:
          path: /fitbit
          method: get
          cors: true
  
  refreshToken:
    handler: handlers/refresh.handler     # ← FIXED: Point to handlers/
    events:
      - http:
          path: /refresh
          method: post
          cors: true

  tokenExchange:
    handler: handlers/tokenExchange.handler # ← ADD: Your new endpoint
    events:
      - http:
          path: /token-exchange
          method: post
          cors: true

# Add CORS error handling
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000