import React, { useState, useEffect } from 'react';
import './App.css';
import { auth, db, app } from '../firebase-config';
import { collection, addDoc, query, limit } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';
import { BrowserRouter as Router} from 'react-router-dom';
import { Routes, Route, Navigate, useNavigate } from 'react-router-dom';
//import ConnectDevicePage from './ConnectDevice/ConnectDevicePage';
import FitbitCallback from './FitbitCallback';
//import FitbitConnect from './FitbitConnect';
//getFirestore, collection, addDoc, doc, setDoc, getDocs, query, limit
function HomePage() {
  // Add useNavigate hook
  const navigate = useNavigate();
  
  // State for device selection
  const [selectedDevice, setSelectedDevice] = useState('apple-watch');
  
  // State for Firebase connection status
  const [firebaseStatus, setFirebaseStatus] = useState({
    appInitialized: false,
    dbInitialized: false,
    authChecked: false,
    readSuccess: false,
    writeSuccess: false,
    error: null
  });
  
  // State for form data
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    password: '',
    age: '',
    gender: '',
    weight: '',
    height: '',
    covidDate: '',
    longCovidDuration: '',
    covidSeverity: '',
    symptoms: {
      fatigue: false,
      pem: false,
      brainfog: false,
      headaches: false,
      sob: false,
      palpitations: false,
      dizziness: false,
      jointpain: false
    },
    medicalConditions: '',
    deviceAccessPermission: false
  });

  // Test Firebase connection when the component mounts
  useEffect(() => {
    const testFirebaseConnection = async () => {
      console.log("Testing Firebase connection...");
      
      try {
        // Test if Firebase app is initialized
        if (app) {
          console.log("✅ Firebase app initialized successfully");
          setFirebaseStatus(prev => ({ ...prev, appInitialized: true }));
        } else {
          console.error("❌ Firebase app failed to initialize");
          setFirebaseStatus(prev => ({ 
            ...prev, 
            appInitialized: false,
            error: "Firebase app failed to initialize" 
          }));
          return;
        }
        
        // Test if Firestore is initialized
        if (db) {
          console.log("✅ Firestore DB initialized successfully");
          setFirebaseStatus(prev => ({ ...prev, dbInitialized: true }));
        } else {
          console.error("❌ Firestore DB failed to initialize");
          setFirebaseStatus(prev => ({ 
            ...prev, 
            dbInitialized: false,
            error: "Firestore DB failed to initialize" 
          }));
          return;
        }
        
        // Test authentication state
        console.log("Checking authentication state...");
        onAuthStateChanged(auth, (user) => {
          if (user) {
            console.log("✅ User is authenticated:", user.uid);
          } else {
            console.log("ℹ️ No user is authenticated. Anonymous/public access will be used.");
          }
          setFirebaseStatus(prev => ({ ...prev, authChecked: true }));
        });
        
        // Test Firestore read access with error handling
        try {
          const testQuery = query(collection(db, "users"), limit(1));
          //const querySnapshot = await getDocs(testQuery);
          
          console.log("✅ Successfully connected to Firestore", testQuery);
          setFirebaseStatus(prev => ({ ...prev, readSuccess: true }));
        } catch (error) {
          console.error("❌ Failed to read from Firestore:", error);
          console.log("This could be due to permissions or rules configuration");
          setFirebaseStatus(prev => ({ 
            ...prev, 
            readSuccess: false,
            error: `Failed to read from Firestore: ${error.message}` 
          }));
        }
        
        // Test Firestore write access with error handling
        try {
          const testCollection = collection(db, "connection_tests");
          const testDoc = await addDoc(testCollection, {
            test: true,
            timestamp: new Date(),
            message: "Connection test"
          });
          console.log("✅ Successfully wrote test document with ID:", testDoc.id);
          setFirebaseStatus(prev => ({ ...prev, writeSuccess: true }));
        } catch (error) {
          console.error("❌ Failed to write to Firestore:", error);
          console.log("This is likely due to Firebase security rules configuration");
          setFirebaseStatus(prev => ({ 
            ...prev, 
            writeSuccess: false,
            error: `Failed to write to Firestore: ${error.message}` 
          }));
        }
      } catch (error) {
        console.error("❌ Firebase connection test failed:", error);
        setFirebaseStatus(prev => ({ 
          ...prev, 
          error: `Firebase connection test failed: ${error.message}` 
        }));
      }
    };

    testFirebaseConnection();
  }, []);
  
  // Handle device selection
  const handleDeviceSelect = (deviceId) => {
    setSelectedDevice(deviceId);
    setFormData({
      ...formData,
      device: deviceId
    });
  };
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { id, value, type, checked } = e.target;
    
    if (type === 'checkbox') {
      if (id === 'deviceAccessPermission') {
        setFormData({
          ...formData,
          deviceAccessPermission: checked
        });
      } else {
        // For symptom checkboxes
        setFormData({
          ...formData,
          symptoms: {
            ...formData.symptoms,
            [id]: checked
          }
        });
      }
    } else {
      setFormData({
        ...formData,
        [id]: value
      });
    }
  };
  
  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // Add a document with auto-generated ID
      const docRef = await addDoc(collection(db, "users"), {
        ...formData,
        device: selectedDevice,
        createdAt: new Date()
      });
      console.log("User document written with ID: ", docRef.id);
      
      alert("Your information has been successfully saved!");
      
      // Navigate to the next page after successful form submission
      navigate('/connect-device', { state: { userId: docRef.id, selectedDevice } });
      
    } catch (error) {
      console.error("Error adding document: ", error);
      alert("There was an error saving your information. Please try again.");
    }
  };

  // Devices data
  const devices = [
    {
      id: 'apple-watch',
      name: 'Apple Watch',
      description: 'Connect via Apple Health',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <rect width="16" height="16" x="4" y="4" rx="2" ry="2"></rect>
          <path d="M9 9h.01"></path>
          <path d="M15 9h.01"></path>
          <path d="M9.5 13.5a2 2 0 0 0 5 0"></path>
        </svg>
      )
    },
    {
      id: 'fitbit',
      name: 'Fitbit',
      description: 'Connect via Fitbit API',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z"></path>
        </svg>
      )
    },
    {
      id: 'garmin',
      name: 'Garmin',
      description: 'Connect via Garmin Connect',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <path d="M12 6v6l4 2"></path>
        </svg>
      )
    },
    {
      id: 'samsung-health',
      name: 'Samsung Health',
      description: 'Connect via Samsung Health',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"></path>
          <path d="M18 9h1.5a2.5 2.5 0 0 0 0-5H18"></path>
          <path d="M4 22h16"></path>
          <path d="M10 14.66V17c0 .55-.47 1-1 1H7c-.55 0-1-.45-1-1v-2.34"></path>
          <path d="M18 14.66V17c0 .55-.47 1-1 1h-2c-.55 0-1-.45-1-1v-2.34"></path>
          <path d="M12 9v12"></path>
          <path d="M12 5v4"></path>
        </svg>
      )
    },
    {
      id: 'google-fit',
      name: 'Google Fit',
      description: 'Connect via Google Fit API',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M12 22v-5"></path>
          <path d="M9 7V2"></path>
          <path d="M15 7V2"></path>
          <path d="M12 17v-5"></path>
          <path d="M5 17h14v-5H5z"></path>
          <path d="M5 12h14V7H5z"></path>
        </svg>
      )
    },
    {
      id: 'manual-entry',
      name: 'Manual Entry',
      description: 'Record data manually',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"></path>
          <path d="m15.194 13.707 3.814 1.86-1.86 3.814"></path>
          <path d="M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"></path>
        </svg>
      )
    }
  ];

  // Symptoms list
  const symptoms = [
    { id: 'fatigue', label: 'Fatigue' },
    { id: 'pem', label: 'Post-exertional malaise' },
    { id: 'brainfog', label: 'Brain fog' },
    { id: 'headaches', label: 'Headaches' },
    { id: 'sob', label: 'Shortness of breath' },
    { id: 'palpitations', label: 'Heart palpitations' },
    { id: 'dizziness', label: 'Dizziness' },
    { id: 'jointpain', label: 'Joint/muscle pain' }
  ];

  // Firebase Status message
  const renderFirebaseStatus = () => {
    if (firebaseStatus.error) {
      return (
        <div className="firebase-status error">
          <h3>⚠️ Firebase Connection Error</h3>
          <p>{firebaseStatus.error}</p>
        </div>
      );
    }
    
    if (firebaseStatus.appInitialized && firebaseStatus.dbInitialized && 
        firebaseStatus.readSuccess && firebaseStatus.writeSuccess) {
      return (
        <div className="firebase-status success">
          <h3>✅ Firebase Connection Successful</h3>
          <p>Your app is properly connected to Firebase.</p>
        </div>
      );
    }
    
    return null;
  };

  return (
    <div className="app">
      <div className="main-content">
        <div className="container">
          {/* Render Firebase status message if needed */}
          {renderFirebaseStatus()}
          
          <div className="welcome-section">
            <h1>Welcome to Energy Balance</h1>
            <p>Your personal Long COVID management system designed to help you monitor and manage your energy levels, prevent post-exertional malaise, and improve your quality of life.</p>
          </div>

          <div className="steps-container">
            <div className="step active-step">
              <div className="step-number">1</div>
              <div className="step-label">Personal Details</div>
            </div>
            <div className="step-connector"></div>
            <div className="step">
              <div className="step-number">2</div>
              <div className="step-label">Connect Device</div>
            </div>
            <div className="step-connector"></div>
            <div className="step">
              <div className="step-number">3</div>
              <div className="step-label">Sync Data</div>
            </div>
          </div>

          <form onSubmit={handleSubmit}>
            <div className="form-section">
              <h2>Tell us about yourself</h2>
              <p>This information helps us create a personalized system tailored to your specific needs and condition.</p>
              
              <div className="info-box">
                <h3>Why we need this information</h3>
                <p>Your personal details help our system calculate your energy baseline, recovery capacity, and create a customized energy envelope specifically for your condition. All information is stored securely and processed locally on your device.</p>
              </div>
              
              <div className="form-grid">
                <div className="form-group">
                  <label htmlFor="fullName">Full Name</label>
                  <input 
                    type="text" 
                    id="fullName" 
                    placeholder="Enter your full name" 
                    value={formData.fullName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="email">Email Address</label>
                  <input 
                    type="email" 
                    id="email" 
                    placeholder="Enter your email" 
                    value={formData.email}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="password">Create Password</label>
                  <input 
                    type="password" 
                    id="password" 
                    placeholder="Create a secure password" 
                    value={formData.password}
                    onChange={handleInputChange}
                    required
                  />
                  <div className="help-text">Must be at least 8 characters with numbers and symbols</div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="age">Age</label>
                  <input 
                    type="number" 
                    id="age" 
                    placeholder="Enter your age" 
                    value={formData.age}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="gender">Gender</label>
                  <select 
                    id="gender"
                    value={formData.gender}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="" disabled>Select your gender</option>
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="nonbinary">Non-binary</option>
                    <option value="other">Other</option>
                    <option value="prefer-not">Prefer not to say</option>
                  </select>
                </div>
                
                <div className="form-group">
                  <label htmlFor="weight">Weight (kg)</label>
                  <input 
                    type="number" 
                    id="weight" 
                    placeholder="Enter your weight in kg" 
                    value={formData.weight}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="height">Height (cm)</label>
                  <input 
                    type="number" 
                    id="height" 
                    placeholder="Enter your height in cm" 
                    value={formData.height}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="covidDate">When did you first get COVID?</label>
                  <input 
                    type="date" 
                    id="covidDate" 
                    value={formData.covidDate}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="form-group">
                  <label htmlFor="longCovidDuration">How long have you had Long COVID symptoms?</label>
                  <select 
                    id="longCovidDuration"
                    value={formData.longCovidDuration}
                    onChange={handleInputChange}
                    required
                  >
                    <option value="" disabled>Select duration</option>
                    <option value="3-6">3-6 months</option>
                    <option value="6-12">6-12 months</option>
                    <option value="1-2">1-2 years</option>
                    <option value="2+">More than 2 years</option>
                  </select>
                </div>
              </div>
              
              <div className="form-group">
                <label htmlFor="covidSeverity">How would you rate the severity of your Long COVID symptoms?</label>
                <select 
                  id="covidSeverity"
                  value={formData.covidSeverity}
                  onChange={handleInputChange}
                  required
                >
                  <option value="" disabled>Select severity</option>
                  <option value="mild">Mild - I can function normally most days</option>
                  <option value="moderate">Moderate - I have to limit some activities</option>
                  <option value="severe">Severe - I have significant limitations daily</option>
                  <option value="very-severe">Very Severe - I am mostly housebound</option>
                </select>
              </div>
              
              <div className="form-group">
                <label>What symptoms do you experience? (Select all that apply)</label>
                <div className="symptoms-grid">
                  {symptoms.map(symptom => (
                    <div key={symptom.id} className="symptom-checkbox">
                      <input 
                        type="checkbox" 
                        id={symptom.id} 
                        checked={formData.symptoms[symptom.id]} 
                        onChange={handleInputChange} 
                      /> 
                      <label htmlFor={symptom.id}>{symptom.label}</label>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="form-group">
                <label htmlFor="medicalConditions">Do you have any pre-existing medical conditions?</label>
                <textarea 
                  id="medicalConditions" 
                  rows="3" 
                  placeholder="Please list any medical conditions you had before COVID (e.g., diabetes, hypertension, autoimmune conditions)"
                  value={formData.medicalConditions}
                  onChange={handleInputChange}
                ></textarea>
              </div>
            </div>

            <div className="form-section device-section">
              <h2>Connect your wearable device</h2>
              <p>Select your wearable device to connect with Energy Balance. This allows us to track your heart rate, activity levels, and other metrics to help manage your energy.</p>
              
              <div className="info-box">
                <h3>Why connect a wearable device?</h3>
                <p>Energy Balance uses data from your wearable device to monitor heart rate, heart rate variability (HRV), and activity levels. This provides objective measurements of your energy expenditure and physiological stress, helping to prevent overexertion and PEM.</p>
              </div>

              <div className="device-cards">
                {devices.map(device => (
                  <div 
                    key={device.id}
                    className={`device-card ${selectedDevice === device.id ? 'selected' : ''}`}
                    onClick={() => handleDeviceSelect(device.id)}
                  >
                    <div className="device-icon">
                      {device.icon}
                    </div>
                    <div className="device-name">{device.name}</div>
                    <div className="device-description">{device.description}</div>
                  </div>
                ))}
              </div>

              <div className="form-group permission-group">
                <label htmlFor="deviceAccessPermission">Device Access Permission</label>
                <div className="permission-checkbox">
                  <input 
                    type="checkbox" 
                    id="deviceAccessPermission" 
                    checked={formData.deviceAccessPermission}
                    onChange={handleInputChange}
                    required
                  /> 
                  <label htmlFor="deviceAccessPermission">
                    I authorize Energy Balance to access my fitness data from the selected device for the purpose of energy monitoring and management.
                  </label>
                </div>
              </div>
            </div>

            <div className="navigation-buttons">
              <button type="button" className="btn btn-outline">Cancel</button>
              <button type="submit" className="btn btn-primary">Continue to Device Setup</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

function App() {
  return (
    <div className="app">                                                                                                                        
      <header>                                                                                                                                   
        <div className="container">                                                                                                              
          <div className="logo">                                                                                                                 
            <div className="logo-icon">                                                                                                          
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">                                                                                                 
                <path d="M12 12v.01"></path>                                                                                                     
                  <path d="M19.071 4.929c-1.948-1.95-4.571-2.927-7.071-2.929-2.474 0-5.071.966-7.071 2.929-1.951 1.949-2.927 4.573-2.929 7.071-.001 2.5.975 5.023 2.929 7.071 1.948 1.95 4.571 2.927 7.071 2.929 2.474 0 5.071-.966 7.071-2.929 1.951-1.949 2.927-4.573 2.929-7.071.001-2.5-.975-5.023-2.929-7.071Z"></path>
                <path d="M8 12h8"></path>                                                                                                        
                <path d="M12 8v8"></path>                                                                                                        
              </svg>                                                                                                                             
            </div>                                                                                                                               
            Energy Balance                                                                                                                       
          </div>                                                                                                                                 
        </div>                                                                                                                                   
      </header>                                                                                                                                  
                                                                                                                                                 
      <Routes>                                                                                                                                        
        <Route path="/" element={<HomePage />} />   
          <Route path="/energy_balance/" element={<Navigate to="/" replace />} />
	    <Route path="/connect-device" element={<ConnectDevicePage />} />
        
	      <Route path="/fitbit-connect" element={<FitbitConnect />} />
        <Route path="/fitbit-callback" element={<FitbitCallback />} />
        {/* Add the missing route for /energy_balance/ */}
                                                                         
        {/* Add other routes as needed */}                                                                                                     
      </Routes>                                                                                                                                       
                                                                                                                                                 
      <footer className="footer">                                                                                                                
        <div className="container">                                                                                                              
          <p>© 2025 Energy Balance - Long COVID Management System. All rights reserved.</p>                                                      
          <p>Privacy Policy | Terms of Service | Help Center</p>                                                                                 
        </div>                                                                                                                                   
      </footer>                                                                                                                                  
    </div>
  );
}

export default App;
