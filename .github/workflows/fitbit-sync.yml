# .github/workflows/fitbit-sync.yml
name: Fitbit Data Sync

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      log_level:
        description: 'Log level'
        required: false
        default: 'INFO'
        type: choice
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR

jobs:
  sync-fitbit-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Debug repository contents
      run: |
        echo "=== Repository Structure ==="
        ls -la
        echo ""
        echo "=== Python files ==="
        find . -name "*.py" -type f | head -10
        echo ""
        echo "=== Check for fitbit_sync.py ==="
        if [ -f "fitbit_sync.py" ]; then
          echo "‚úÖ fitbit_sync.py found"
          ls -la fitbit_sync.py
        else
          echo "‚ùå fitbit_sync.py NOT found"
          echo "Available Python files:"
          find . -name "*.py" -type f
        fi
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install firebase-admin>=6.2.0 aiohttp>=3.8.0 python-dateutil>=2.8.0 python-dotenv>=1.0.0
        
    - name: Verify installations
      run: |
        python -c "import firebase_admin; print('‚úÖ Firebase Admin SDK installed')"
        python -c "import aiohttp; print('‚úÖ aiohttp installed')"
        python -c "import json; print('‚úÖ json available')"
        
    - name: Test Firebase connection
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      run: |
        python -c "
        import os, json, firebase_admin
        from firebase_admin import credentials, firestore
        try:
            print('üîç Testing Firebase connection...')
            service_account_key = os.environ.get('FIREBASE_SERVICE_ACCOUNT_KEY', '')
            if not service_account_key:
                raise ValueError('FIREBASE_SERVICE_ACCOUNT_KEY not found')
            
            print(f'‚úÖ Secret present ({len(service_account_key)} chars)')
            service_account_info = json.loads(service_account_key)
            print(f'‚úÖ JSON valid, project: {service_account_info.get(\"project_id\", \"unknown\")}')
            
            cred = credentials.Certificate(service_account_info)
            firebase_admin.initialize_app(cred)
            db = firestore.client()
            
            # Test query
            users_ref = db.collection('users')
            test_query = users_ref.limit(1)
            docs = list(test_query.stream())
            print(f'‚úÖ Firestore connected, test query returned {len(docs)} documents')
            
            # Check for Fitbit users
            fitbit_query = users_ref.where('selectedDevice', '==', 'fitbit').where('deviceConnected', '==', True)
            fitbit_users = list(fitbit_query.stream())
            print(f'‚úÖ Found {len(fitbit_users)} Fitbit users ready for sync')
            
        except Exception as e:
            print(f'‚ùå Firebase connection failed: {e}')
            exit(1)
        "
        
    - name: Run Fitbit sync
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
      run: |
        echo "üöÄ Starting Fitbit sync..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Checking fitbit_sync.py..."
        
        if [ ! -f "fitbit_sync.py" ]; then
          echo "‚ùå ERROR: fitbit_sync.py not found in repository"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "‚úÖ Running fitbit_sync.py..."
        python fitbit_sync.py
        
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: sync-logs-${{ github.run_number }}
        path: |
          *.log
        retention-days: 7

    # Optional: Send notification on failure
    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Fitbit sync failed at $(date)"

  # Health check job to monitor sync performance
  health-check:
    runs-on: ubuntu-latest
    needs: sync-fitbit-data
    if: always()
    
    steps:
    - name: Check sync health
      run: |
        echo "üîç Checking sync job result: ${{ needs.sync-fitbit-data.result }}"
        
        if [ "${{ needs.sync-fitbit-data.result }}" == "success" ]; then
          echo "‚úÖ Fitbit sync completed successfully"
          echo "::notice::Sync successful at $(date)"
        elif [ "${{ needs.sync-fitbit-data.result }}" == "failure" ]; then
          echo "‚ùå Fitbit sync failed"
          echo "::error::Sync failed at $(date)"
          echo ""
          echo "üîç Common failure reasons:"
          echo "1. fitbit_sync.py file not found in repository"
          echo "2. Missing or invalid FIREBASE_SERVICE_ACCOUNT_KEY secret"
          echo "3. Python import errors or missing dependencies"
          echo "4. Firebase connection issues"
          echo "5. API connectivity problems"
          echo ""
          echo "üìã Next steps:"
          echo "1. Check the 'sync-fitbit-data' job logs above"
          echo "2. Verify fitbit_sync.py is in your repository root"
          echo "3. Verify your GitHub secret is set correctly"
          exit 1
        elif [ "${{ needs.sync-fitbit-data.result }}" == "cancelled" ]; then
          echo "‚ö†Ô∏è Fitbit sync was cancelled"
          echo "::warning::Sync cancelled at $(date)"
          exit 1
        else
          echo "‚ùì Unknown sync result: ${{ needs.sync-fitbit-data.result }}"
          exit 1
        fi
        
    - name: Post-sync summary
      if: needs.sync-fitbit-data.result == 'success'
      run: |
        echo "üìä Sync Summary:"
        echo "- Workflow: ${{ github.workflow }}"
        echo "- Run number: ${{ github.run_number }}"
        echo "- Triggered by: ${{ github.event_name }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Runner: ${{ runner.os }}"
        echo "- Python version: 3.11"
        echo "- Timestamp: $(date -u)"

  # Optional: Cleanup old workflow runs (runs monthly)
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 1 * *'
    
    steps:
    - name: Delete old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          for (const workflow of workflows.workflows) {
            if (workflow.name === 'Fitbit Data Sync') {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 100,
              });
              
              // Keep only the latest 50 runs, delete the rest
              const runsToDelete = runs.workflow_runs.slice(50);
              
              for (const run of runsToDelete) {
                if (run.status === 'completed') {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id,
                  });
                  console.log(`Deleted run ${run.id}`);
                }
              }
            }
          }
