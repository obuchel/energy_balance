# .github/workflows/fitbit-sync.yml
name: Fitbit Data Sync

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      log_level:
        description: 'Log level'
        required: false
        default: 'INFO'
        type: choice
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR

permissions:
  id-token: write # Required for Workload Identity
  contents: read

env:
  GOOGLE_CLOUD_PROJECT: long-covid-8f42d

jobs:
  sync-fitbit-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Debug repository contents
      run: |
        echo "=== Repository Structure ==="
        ls -la
        echo ""
        echo "=== Python files ==="
        find . -name "*.py" -type f | head -10
        echo ""
        echo "=== Check for fitbit_sync.py ==="
        if [ -f "fitbit_sync.py" ]; then
          echo "‚úÖ fitbit_sync.py found"
          ls -la fitbit_sync.py
        else
          echo "‚ùå fitbit_sync.py NOT found"
          echo "Available Python files:"
          find . -name "*.py" -type f
        fi
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install firebase-admin>=6.2.0 aiohttp>=3.8.0 python-dateutil>=2.8.0 python-dotenv>=1.0.0

    # Workload Identity Authentication
    - id: 'auth'
      name: 'üîê Authenticate with Workload Identity'
      if: vars.USE_WORKLOAD_IDENTITY == 'true'
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

    # Service Account Key Authentication (Fallback)
    - name: 'üîê Setup Service Account Key Authentication'
      if: vars.USE_WORKLOAD_IDENTITY != 'true'
      env:
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      run: |
        if [ -n "$GOOGLE_SERVICE_ACCOUNT_KEY" ]; then
          echo "Using GOOGLE_SERVICE_ACCOUNT_KEY"
          echo "$GOOGLE_SERVICE_ACCOUNT_KEY" > /tmp/service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json" >> $GITHUB_ENV
        elif [ -n "$FIREBASE_SERVICE_ACCOUNT_KEY" ]; then
          echo "Using FIREBASE_SERVICE_ACCOUNT_KEY"
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > /tmp/service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/service-account.json" >> $GITHUB_ENV
        else
          echo "‚ùå No service account key found"
          exit 1
        fi

    - name: Test Firebase connection
      run: |
        python -c "
        import os, json, firebase_admin
        from firebase_admin import credentials, firestore
        try:
            print('üîç Testing Firebase connection...')
            
            # Try different authentication methods
            cred = None
            auth_method = 'unknown'
            
            # Method 1: Workload Identity or Service Account Key file
            cred_path = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
            if cred_path and os.path.exists(cred_path):
                print(f'üîë Using credentials file: {cred_path}')
                cred = credentials.Certificate(cred_path)
                auth_method = 'credentials_file'
            
            # Method 2: Environment variables (legacy)
            elif os.environ.get('GOOGLE_SERVICE_ACCOUNT_KEY'):
                print('üîë Using GOOGLE_SERVICE_ACCOUNT_KEY from environment')
                service_account_info = json.loads(os.environ.get('GOOGLE_SERVICE_ACCOUNT_KEY'))
                cred = credentials.Certificate(service_account_info)
                auth_method = 'google_service_account_key'
            
            elif os.environ.get('FIREBASE_SERVICE_ACCOUNT_KEY'):
                print('üîë Using FIREBASE_SERVICE_ACCOUNT_KEY from environment')
                service_account_info = json.loads(os.environ.get('FIREBASE_SERVICE_ACCOUNT_KEY'))
                cred = credentials.Certificate(service_account_info)
                auth_method = 'firebase_service_account_key'
            
            else:
                raise ValueError('No authentication credentials found')
            
            print(f'‚úÖ Authentication method: {auth_method}')
            
            # Initialize Firebase with explicit project
            firebase_admin.initialize_app(cred, {
                'projectId': 'long-covid-8f42d'
            })
            db = firestore.client()
            
            # Test query
            users_ref = db.collection('users')
            test_query = users_ref.limit(1)
            docs = list(test_query.stream())
            print(f'‚úÖ Firestore connected, test query returned {len(docs)} documents')
            
            # Check for Fitbit users
            fitbit_query = users_ref.where('selectedDevice', '==', 'fitbit').where('deviceConnected', '==', True)
            fitbit_users = list(fitbit_query.stream())
            print(f'‚úÖ Found {len(fitbit_users)} Fitbit users ready for sync')
            
        except Exception as e:
            print(f'‚ùå Firebase connection failed: {e}')
            print('')
            print('üîç Debug information:')
            print(f'GOOGLE_APPLICATION_CREDENTIALS: {\"‚úÖ\" if os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\") else \"‚ùå\"}')
            print(f'GOOGLE_SERVICE_ACCOUNT_KEY: {\"‚úÖ\" if os.environ.get(\"GOOGLE_SERVICE_ACCOUNT_KEY\") else \"‚ùå\"}')
            print(f'FIREBASE_SERVICE_ACCOUNT_KEY: {\"‚úÖ\" if os.environ.get(\"FIREBASE_SERVICE_ACCOUNT_KEY\") else \"‚ùå\"}')
            exit(1)
        "
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        
    - name: Run Fitbit sync
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
      run: |
        echo "üöÄ Starting Fitbit sync..."
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Project ID: long-covid-8f42d"
        echo "Checking fitbit_sync.py..."
        
        if [ ! -f "fitbit_sync.py" ]; then
          echo "‚ùå ERROR: fitbit_sync.py not found in repository"
          echo "Available files:"
          ls -la
          exit 1
        fi
        
        echo "‚úÖ Running fitbit_sync.py..."
        python fitbit_sync.py
        
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: sync-logs-${{ github.run_number }}
        path: |
          *.log
        retention-days: 7

    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Fitbit sync failed at $(date)"

  # Health check job
  health-check:
    runs-on: ubuntu-latest
    needs: sync-fitbit-data
    if: always()
    
    steps:
    - name: Check sync health
      run: |
        echo "üîç Checking sync job result: ${{ needs.sync-fitbit-data.result }}"
        
        if [ "${{ needs.sync-fitbit-data.result }}" == "success" ]; then
          echo "‚úÖ Fitbit sync completed successfully"
          echo "::notice::Sync successful at $(date)"
        elif [ "${{ needs.sync-fitbit-data.result }}" == "failure" ]; then
          echo "‚ùå Fitbit sync failed"
          echo "::error::Sync failed at $(date)"
          exit 1
        else
          echo "‚ö†Ô∏è Sync result: ${{ needs.sync-fitbit-data.result }}"
          exit 1
        fi
        
    - name: Post-sync summary
      if: needs.sync-fitbit-data.result == 'success'
      run: |
        echo "üìä Sync Summary:"
        echo "- Project: long-covid-8f42d"
        echo "- Workflow: ${{ github.workflow }}"
        echo "- Run number: ${{ github.run_number }}"
        echo "- Triggered by: ${{ github.event_name }}"
        echo "- Timestamp: $(date -u)"
